Global variables :
  heat_light_cur      : last measure of the light value (0..1023)
  heat_light_lim      : limit between day and night (0..1023, default: 685)
  heat_timer_num      : timer number (default: 1)
  heat_timer_int      : timer interval (default: 1000)
  heat_mqtt_topic     : MQTT topix prefix (default: "/heat")
  heat_mqtt_idpfx     : MQTT client ID prefix for connect() (default: "")
  heat_mqtt_id        : MQTT client ID (default: chipid())
  heat_mqtt_host      : MQTT broker's IP address (default: none)
  heat_mqtt_port      : MQTT broker's TCP port (default: 1883)
  heat_mqtt           : the MQTT socket
  heat_mqtt_state     : 0=disconnected, 1=connecting, 2=connected
  heat_profile_cur    : current heating profile : ECO/NORMAL/STRONG (no FAST here)
  heat_fast_left      : remaining time to heat in FAST mode instead of NORMAL/STRONG
  heat_env_state      : name of the current state

Global configuration variables
  heat_node_alias     : common name for this device, defaults to heat_mqtt_id
  heat_node_room      : room this device is in, defaults to "home"
  heat_pwm_day        : pwm value to send during day (learned over MQTT)
  heat_pwm_night      : pwm value to send during night (learned over MQTT)
  heat_pwm_ECO        : pwm value to send when nobnody' there (learned over MQTT)
  heat_pwm_NORMAL     : pwm value to send when someone's present (learned over MQTT)
  heat_pwm_STRONG     : pwm value to send when someone's naked (learned over MQTT)
  heat_pwm_FAST       : pwm value to send when leaving ECO mode (learned over MQTT)
  heat_p_NIGHT_LIT    : profile (ECO/NORMAL/STRONG) for NIGHT + light
  heat_p_NIGHT_DRK    : profile (ECO/NORMAL/STRONG) for NIGHT + dark
  heat_p_MORNING_LIT  : profile (ECO/NORMAL/STRONG) for MORNING/WAKEUP + light
  heat_p_MORNING_DRK  : profile (ECO/NORMAL/STRONG) for MORNING/WAKEUP + dark
  heat_p_ATHOME_LIT   : profile (ECO/NORMAL/STRONG) for ATHOME + light
  heat_p_ATHOME_DRK   : profile (ECO/NORMAL/STRONG) for ATHOME + dark
  heat_p_AWAY_LIT     : profile (ECO/NORMAL/STRONG) for AWAY + light
  heat_p_AWAY_DRK     : profile (ECO/NORMAL/STRONG) for AWAY + dark
  heat_p_EVENING_LIT  : profile (ECO/NORMAL/STRONG) for EVENING/BACK + light
  heat_p_EVENING_DRK  : profile (ECO/NORMAL/STRONG) for EVENING/BACK + dark
  heat_p_TOBED_LIT    : profile (ECO/NORMAL/STRONG) for TOBED + light
  heat_p_TOBED_DRK    : profile (ECO/NORMAL/STRONG) for TOBED + dark


MQTT publications :
  [topic]/sts/<id>/light_cur    : 0..1023
  [topic]/sts/<id>/light_lim    : 0..1023
  [topic]/sts/<id>/light_state  : 0..1
  [topic]/sts/<id>/room         : string
  [topic]/sts/<id>/alias        : string
  [topic]/sts/<id>/online       : 1, or absent if disconnected

MQTT subscription :
  [topic]/cmd/<id>/pwm_day   : 0..1023
  [topic]/cmd/<id>/pwm_night : 0..1023
  [topic]/cmd/<id>/light_lim : 0..1023
  [topic]/cmd/<id>/pwm_ECO   : 0..1023
  [topic]/cmd/<id>/pwm_NORMAL: 0..1023
  [topic]/cmd/<id>/pwm_STRONG: 0..1023
  [topic]/cmd/<id>/pwm_FAST  : 0..1023
  [topic]/env/moment         : MORNING, DAY, EVENING
  [topic]/env/state          : NIGHT, WAKEUP, MORNING, ATHOME,
                               AWAY, BACK, EVENING, TOBED


The other end just has to subscribe to '/heat/sts/#' to receive all messages.
Note that when doing an explicit heat_mqtt:close(), the lwt is not applied.
